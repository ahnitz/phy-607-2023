* Project 2
    * Timeline
        * By Oct 11, find a partner, agree on a project concept
          and submit a plan that includes (1) a description of the simulation
          and (2) psuedocode of the main simulation program and (3) a plan for how
          the work will be divided between the group members. This should
          include what modules need to be written, what the expected functions
          or classes are and what you expect them to do 
          (the final implementation can diverge from this). No implementation 
          is required at this point.
        * (guideline) By Oct 19, each group member should have completed their individual
          contributions so that it can be integrated and tested together.
        * Oct 24, Full project and report are due
    * Will be done in groups of 2.
    * write a single report & submit a single git repository with the developed code
    * Conceptual elements
        * (1) Must include a monte carlo simulation of discrete elements (say particles,
        atoms, stars).
        * (2) must include an evolution based on an 2nd order ODE
        (evolution of trajectory under a force, or state evolution) 
        * (3) There must be opportunities for probabilistic interactions (say surface
            interaction which may have specular or diffuse reflection, or 
            interaction probability between particles, decay probability, etc)
        * (4) Must identify a key result that summarizes the properties of the discrete
              elements. (e.g. spatial distribution and type of particle hitting a detector,
              mass distribution after evolution of gravitational n-body problem, etc). 
        * (5) Must identify properties of the simulation and result that can be
              validated based on physical expectation (e.g. symmetries, conservations, etc).
    * Technical
        * The code should be in a new git repository shared between the group members
        * write a single python package (installable) with included main script
            * https://packaging.python.org/en/latest/tutorials/packaging-projects/
              https://packaging.python.org/en/latest/specifications/declaring-project-metadata/#declaring-project-metadata
            * The script should be installed along with the package.
            * The package should list its dependencies needed to run the package
        * use numpy / scipy where applicable
             * make use of elementwise array operations
        * Should create at least two classes
             * The classes should have at least two methods
        * must follow pep8 style (use black to help enforce style)
        * functions / classes / modules must be documented following numpydoc format 
            * https://numpydoc.readthedocs.io/en/latest/format.html
        * comments should still be used to document pieces of the algorithm within functions / methods / etc.
        * use git for your development.
            * incremental changes and work by each group member should be evident from the history of git commits. Do not simply upload files at the end. Develop in git.
            * both members must contribute roughly equally to the code development
        * use scipy or some external algorithm to implmement the ODE solver
        * must use probability distributions (at least two), that demonstrate both rejection sampling and the inverse CDF method.
    * Report
        * The report should details the problem being simulated, highlighting the
          high-level algorithm, the probability distributions used. It should be written
          using latex in a scientific format.
        * The report shoud be formatted similar to a scientific paper with clear sections.
        * should assess the computational complexity of your algorithm
            * both numerically and from first principles
        * Should include benchmarks of the code, which identifies the
          computational performance limiting parts of the code.
        * There should be an explicit validation section that discusses
          and provides evidence that the results are consistent with expecation.
          This should include at least two examples.
        * assess the errors introduced by finite precision,
            numerical integration, and statistical sampling
        * Discuss the results the of the simulation run for at least three
          levels of detail. (e.g. number of particles in the average).
